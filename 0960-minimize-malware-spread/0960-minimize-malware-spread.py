# DAG
class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        adL = defaultdict(list)
        l = len(graph)
        for i in range(l):
            for j in range(l):
                if graph[i][j]==1 and i!=j:
                    adL[i].append(j)
        print(adL)

        def bfs(node):
            
            visited = set()
            q = deque([])
            for n in initial:
                if n!=node:
                    q.append(n)
                    visited.add(n)
            
            while q:
                d = len(q)
                for _ in range(d):
                    nn = q.popleft()
                    for nei in adL[nn]:
                        if nei not in visited:
                            q.append(nei)
                            visited.add(nei)
            return len(visited)
        mini = float('inf')
        ans = 0
        for i in initial:
            count  = bfs(i)
            if count < mini:
                ans  = i
                mini = count
            elif count == mini:
                ans = min(ans,i)
        return ans